SocialLand - Comprehensive Documentation
Table of Contents
Introduction
System Architecture
Database Schema
Core Features
User Interface
Backend Components
Frontend Components
API Documentation
Authentication System
Administration Panel
Common Issues and Fixes
Deployment Guidelines
Performance Optimization
Security Considerations
1. Introduction
SocialLand is an Instagram-like social media platform built with PHP, MySQL, JavaScript, and CSS. The application allows users to share photos, create stories with music, follow other users, like and comment on posts, and participate in events. It includes features such as user verification, private accounts, story viewing, and a comprehensive administration panel.

Project Overview
Name: SocialLand
Version: 1.0.0
Framework: Custom PHP
Database: MySQL
Server Requirements:
PHP 7.4+
MySQL 5.7+
Apache/Nginx
XAMPP (for local development)
2. System Architecture
SocialLand follows a traditional PHP monolithic architecture with the following components:

Directory Structure
CopyInsert
/
├── admin/                # Administrative panel files
├── api/                  # API endpoints for AJAX requests
├── assets/               # Static assets (images, fonts)
├── config/               # Configuration files
├── css/                  # CSS stylesheets
├── database/             # Database schema and migrations
├── fonts/                # Custom fonts
├── images/               # Static images
├── includes/             # Reusable PHP components
├── js/                   # JavaScript files
├── logs/                 # Application logs
├── modals/               # Modal window templates
├── uploads/              # User-uploaded content
├── utils/                # Utility functions and helper scripts
├── vendor/               # Composer dependencies
└── websocket/            # WebSocket server for real-time notifications
Request Flow
User Request: Browser sends request to server
Routing: PHP routes the request to the appropriate file
Controller: PHP script processes the request
Database: Queries are executed against MySQL
View: PHP generates HTML response
Response: HTML/JSON is sent back to the browser
WebSocket Integration
Real-time notifications are handled through a WebSocket server that maintains persistent connections with clients, allowing for instant delivery of notifications about likes, comments, follows, and new stories.

3. Database Schema
SocialLand uses a relational database with the following key tables:

Primary Tables
users: Stores user account information and preferences
posts: Contains user posts with images and captions
comments: Stores comments on posts, including nested replies
likes: Tracks likes on posts and comments
followers: Manages user follow relationships
stories: Stores temporary user stories with 24-hour expiration
story_views: Tracks who has viewed each story
notifications: Handles system notifications for various activities
events: Manages community events with details and registrations
blocked_users: Tracks user blocking relationships
Relationship Design
One-to-Many: Users → Posts, Users → Comments, Posts → Comments
Many-to-Many: Users ↔ Followers, Users ↔ Blocked Users
Complex Relationships: Story Views, Notifications, Reports
Database Diagram
The database includes 20+ interconnected tables that manage all aspects of the social media platform's functionality, from user relationships to content interaction and moderation.

4. Core Features
User Management
Registration and Authentication: Secure user registration and login
Profile Management: Edit profile details, bio, and profile picture
Verification System: Users can request verification badges
Private Accounts: Users can make their accounts private
Follow Management: Follow/unfollow users, accept/reject follow requests
Content Sharing
Posts: Share photos with captions, location, and user tags
Stories: Share temporary content that expires after 24 hours
Story with Music: Add 15-second music clips to stories with selection capabilities
Comments: Add comments and replies to posts
Likes: Like posts, comments, and stories
Feed and Discovery
Feed Algorithm: Displays posts from followed users
Explore Page: Discover new content and users
Search Functionality: Find users, posts, and locations
Interaction
Notifications: Real-time alerts for likes, comments, follows, etc.
Direct Messaging: (Placeholder for future implementation)
Story Viewers: See who viewed your stories
Post Engagement: Like, comment, save, and share posts
Events
Event Creation: Create and manage community events
Event Registration: Users can register for events
Prize System: Events can include prize information
Reporting and Moderation
Content Reporting: Report inappropriate posts, comments, stories
User Reporting: Report problematic user accounts
Moderation Tools: Admin interface for handling reports
5. User Interface
Main Pages
Login/Register: User authentication pages
Dashboard: Main feed showing posts from followed users
Explore: Discover new content
Profile: User profiles showing posts and stories
Activity: Notification and activity feed
Events: Browse and register for events
Location: View posts from specific locations
Navigation
Navbar: Main navigation with logo, search, and profile links
Sidebar: Desktop navigation with additional menu options
Bottom Navigation: Mobile-optimized navigation bar
Modal Windows
Create Post: Modal for creating new posts
Story Modal: View and interact with stories
Likes Modal: See users who liked content
Report Modal: Report inappropriate content
Event Details: View event information and register
Responsive Design
The interface is fully responsive with specific optimizations for:

Mobile devices (< 768px)
Tablets (768px - 1024px)
Desktops (> 1024px)
6. Backend Components
Authentication System
login.php: User authentication
register.php: New user registration
logout.php: Session termination
Core Functionality
dashboard.php: Main feed and story viewing
profile.php: User profile pages
postview.php: Detailed post view
user.php: User profile management
explore.php: Content discovery
events.php: Event listing and management
Utility Scripts
follow.php: Handle follow/unfollow actions
like.php: Process like/unlike actions
comment.php: Manage comments and replies
report_*.php: Handle various reporting functions
handle_*.php: Process user actions
Helper Classes
NotificationHelper.php: Manage and send notifications
ImageHelper.php: Process and optimize uploaded images
Admin Components
admin/dashboard.php: Admin dashboard with statistics
admin/users.php: User management interface
admin/reports.php: Content moderation tools
admin/verify.php: Verification request management
admin/locations.php: Location management
admin/maintenance.php: System maintenance tools
7. Frontend Components
JavaScript Modules
global-init.js: Global initialization and utilities
like.js: Handle post and comment likes
comment-handlers.js: Process comment submission and display
emoji-picker-final.js: Emoji selector for comments and posts
event-modal.js: Event viewing and registration
event-validation.js: Form validation for event creation
Modal Components
create.php: Post creation modal
story_modal.php: Story viewing interface
likes_modal.php: Users who liked content
followers_modal.php: Follower management
following_modal.php: Following management
report_modal.php: Content reporting interface
CSS Structure
Utilizes Tailwind CSS for responsive design
Custom CSS for specific components and animations
Dark mode support throughout the application
8. API Documentation
User API Endpoints
GET /api/user/{id}: Retrieve user information
POST /api/follow: Follow/unfollow a user
GET /api/notifications: Get user notifications
POST /api/update-profile: Update user profile
Content API Endpoints
POST /api/post/create: Create a new post
POST /api/comment: Add a comment to a post
POST /api/like: Like/unlike a post or comment
GET /api/posts/{user_id}: Get user posts
POST /api/story/create: Create a new story
GET /api/stories/{user_id}: Get user stories
Admin API Endpoints
GET /api/admin/stats: Get platform statistics
POST /api/admin/verify-user: Verify/unverify a user
POST /api/admin/ban-user: Ban/unban a user
GET /api/admin/reports: Get reported content
Response Format
All API endpoints return JSON responses with the following structure:

json
CopyInsert
{
  "success": true|false,
  "message": "Response message",
  "data": { /* Response data */ }
}
9. Authentication System
Registration Process
User submits registration form with username, email, and password
System validates input and checks for existing accounts
Password is hashed using secure algorithm
User account is created with default settings
Session is created and user is redirected to dashboard
Login Process
User submits login form with username/email and password
Credentials are validated against database
On success, session is created with user information
Failed attempts are logged for security monitoring
Session Management
Sessions are managed using PHP's native session handling
Security hardening includes HTTP-only cookies and secure flags
Session validity is checked on each page load
Idle timeout automatically logs out inactive users
Authorization Levels
User: Standard user privileges
Moderator: Content moderation capabilities
Admin: Full system administration
Master_Admin: Complete control including system configuration
10. Administration Panel
Dashboard
Overview: System statistics and activity metrics
Recent Activity: Latest registrations, posts, and reports
Performance Metrics: Server status and response times
User Management
User Listing: Searchable, filterable user directory
User Editing: Modify user details and privileges
Verification Management: Process verification requests
Ban Management: Temporarily or permanently ban users
Content Moderation
Reports Queue: Review and address reported content
Content Removal: Delete inappropriate posts/comments
Bulk Actions: Perform actions on multiple items
Location Management
Location Directory: View and manage location entries
Location Reports: Handle reports of inappropriate locations
System Maintenance
Cache Management: Clear application caches
Database Tools: Optimize database performance
Error Logs: View and analyze system error logs
11. Common Issues and Fixes
Follow Button Functionality
The follow button on user profiles experienced multiple issues that were resolved by:

Changing from URLSearchParams to FormData for better data handling
Removing preventDefault() and stopPropagation() calls that were blocking event flow
Removing the setTimeout wrapper and running code directly in DOMContentLoaded
Adding a cooldown mechanism to prevent rapid clicking
Fixing CSS class handling and button text updating on hover
Adding proper follower count updating in the UI
Post Rendering in Dashboard
Posts were not displaying correctly in the dashboard due to:

Inconsistent type handling (string vs integer) during post ID comparison
Duplicate post detection issues
Resolved by normalizing all post IDs to integers, implementing better duplicate detection, and adding verification system for missing posts
Older Posts Not Displaying
Issues with older posts not showing in the feed were fixed by:

Increasing the SQL query limit from 10 to 50 posts
Fixing the JavaScript function call from likePost to handleLike
Ensuring dynamically created HTML matches server-rendered structure
Create Modal Functionality
The Create modal had functionality issues resolved by:

Identifying and resolving JavaScript function conflicts between create-modal.js and post_functions.php
Fixing button visibility issues with proper styling attributes
Maintaining background scrolling prevention when modal is open
Adding fallback selector approach for button finding
Ensuring proper initialization of file input and button functionality
Story with Music Implementation
The story feature with music required several specific implementations:

Stories with music set to last 15 seconds (matching selected music segment)
Stories without music set to last 5 seconds
Immediate music playback from selected start position
Display of song name below username
Looping the selected 15-second segment
Draggable selector for choosing which segment to use
Sharing functionality to post with selected music and start time
Event Prize Display
Fixed an undefined array key warning in event_details.php by:

Updating prize display to match actual database schema
Changing code to display dynamic titles instead of accessing non-existent column
12. Deployment Guidelines
Server Requirements
Web Server: Apache 2.4+ or Nginx 1.18+
PHP Version: 7.4+ (8.0+ recommended)
MySQL: 5.7+ or MariaDB 10.4+
Extensions: PDO, GD, Mbstring, JSON, OpenSSL
Memory: Minimum 2GB RAM recommended
Installation Steps
Clone the repository to your web server
Create a MySQL database
Import database/schema.sql to create the schema
Configure config/database.php with your credentials
Set appropriate permissions on the uploads directory
Configure your web server to point to the project root
Access the application through your domain
XAMPP Configuration (Development)
Place project files in htdocs directory
Start Apache and MySQL services
Create database through phpMyAdmin
Import schema file
Configure database connection
Access via localhost
Production Hardening
Disable PHP error display in config/config.php
Enable HTTPS and configure secure cookies
Set appropriate file permissions
Configure server-level caching
Implement rate limiting on sensitive endpoints
13. Performance Optimization
Database Optimization
Indexing: Critical columns are indexed for faster queries
Query Optimization: Complex queries are optimized for performance
Connection Pooling: Database connections are reused where possible
Content Delivery
Image Optimization: Automatic resizing and compression of uploaded images
Cache Headers: Proper cache headers for static resources
Lazy Loading: Images and content are loaded on-demand
Frontend Performance
Minification: CSS and JavaScript files are minified
Bundling: Related scripts are bundled to reduce HTTP requests
Async Loading: Non-critical scripts are loaded asynchronously
Scaling Considerations
Horizontal Scaling: Application designed to scale across multiple servers
Vertical Scaling: Resource utilization optimized for single-server performance
Database Sharding: Preparation for future data sharding if needed
14. Security Considerations
Authentication Security
Password Hashing: Secure password storage using modern algorithms
Brute Force Protection: Account lockout after failed attempts
Session Security: HTTP-only, secure cookies with proper expiration
Input Validation
Server-side Validation: All user inputs are validated server-side
Prepared Statements: SQL injection prevention with PDO prepared statements
XSS Prevention: Output escaping to prevent cross-site scripting
Permission System
Role-based Access Control: Access restricted based on user roles
Object-level Permissions: Users can only access/modify their own content
Admin Restrictions: Tiered admin permissions with audit logging
File Upload Security
Filetype Validation: Strict checking of uploaded file types
Size Limits: Enforced maximum file sizes
Storage Isolation: Uploaded files stored outside web root when possible
Sensitive Data
API Key Protection: YouTube API key should be moved to environment variables
Error Handling: Production errors logged without exposing details to users
Database Credentials: Should be moved to environment variables instead of config files